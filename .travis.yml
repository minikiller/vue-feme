language: node_js

node_js: 15.12.0
# node_js: 14.15.5

#CI处理过程承载的方式为docker容器
services:
  - docker

# script: 
#   - npm run test

env:
  glob:
    - APP_IMAGE: vue-feme:latest      #产品镜像名
    - FORM_REG_PRO: mclitao
    - FORM_REG: index.docker.io       #产品源 docker 仓库
    - TO_REG: registry.heroku.com     #部署目标 huerku 部署仓库

#=============CI Docker build to docker Hub===============

#CI/CD任务分包，编译、测试、发布等任务。  
#整个CI工作都会由Travis替你使用它自身的算力网络存储完成工作！！！
jobs:
  include:
    #-----------ci-task----------------------------
    # build
    # - stage: clear docker images
    #   script:
    #     - docker images
    - stage: build docker images and push to registry
      script:
        - print("Debug --task--job----number 1---------------.")
      #此处铭感信息存放到Travis后台，其它存放此在env。
        - echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        - docker build -t ${APP_IMAGE} .
        - docker tag ${APP_IMAGE} ${FORM_REG_PRO}/${APP_IMAGE}
        - docker push ${FORM_REG_PRO}/${APP_IMAGE}   # to registry
#=============CD  部署到Heroku================
before_script:
  # 部署前将app提交到目标平台的仓库中herkoku
  - echo "Debug --before_script-----number 1----------------------"
  - echo "$DOCKER_PASSWORD" | docker login $FORM_REG -u "$DOCKER_USERNAME" --password-stdin # login to docker hub
  - docker pull ${FORM_REG_PRO}/${APP_IMAGE}  # pull product app imagees
  - curl https://cli-assets.heroku.com/install.sh | sh  #install heroku
  - docker login --username=$HEROKU_LOGIN --password=$HEROKU_API_KEY ${TO_REG} #login to registry.heroku.com
  - docker tag ${FORM_REG_PRO}/${APP_IMAGE} ${TO_REG}/${APP_IMAGE}
  - docker push ${TO_REG}/${APP_IMAGE}
  
deploy:
- provider: script
  skip_cleanup: true
#  script: bash .travis/deploy.sh
  script:
    echo "Debug --deploy------number 1--------------------------"
    heroku container:release web --app ${HEROKU_APP};
    
  verbose: true
  on:
    branch: main
cache:
  directories:
  - "$HOME/.m2"

